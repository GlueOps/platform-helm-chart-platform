# @ignored
development_mode_enabled: false

# -- The Route53 subdomain for the services on your cluster. It will be used as the suffix url for argocd, grafana, vault, and any other services that come out of the box in the glueops platform. Note: you need to create this before using this repo as this repo does not provision DNS Zones for you.
# This is the domain you created through: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
captain_domain: <cluster_env>.<tenant-name-goes-here>.onglueops.rocks

glueops_alerts:
  # -- Part of `opsgenie_prometheus_api_keys` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  opsgenie_apikey: nil

# Configuration for backups taken by the GlueOps Platform
glueops_backups:
  # Credentials and configuration for backing up vault, values are generated by terraform-module-cloud-multy-prerequisites and are specific to this backup process, due to narrowly scoped permissions
  vault:
    # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
    aws_region: us-west-2
    # -- Part of `vault_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
    aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
    # -- Part of `vault_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
    aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
    # @ignored
    cron_expression: "0 */6 * * *"
    company_key: <tenant-name-goes-here>

gitHub:
  # -- create a Personal Access Token in github that has repo scope access. It would be best to use a service account for this otherwise all the comments on PR will be left in your name
  api_token: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # @ignored
  credentialTemplateUrl: "Z2l0QGdpdGh1Yi5jb20=" #git@github.com
  # -- The format is: <github-org-name>:<github-team-name> (The team should include the developers)
  customer_github_org_and_team: "glueops-rocks:developers"
  # -- This is the repo that will be used to store all the tenant's cluster applications. The developers will have access to this repo and will be able to create PRs to this repo. The repo should be private. 
  tenant_application_stack_repo: "git@github.com:<your-org-name>/<your-repo-name>.git"
  # -- Create a deploy key to access the application stack repository it and format using `cat <key-file> | base64 | tr -d '\n'`. ref: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys#deploy-keys
  tenant_b64enc_ssh_private_key: XXXXXXXXXXXXXXXXXXXXXXXXXX

# Used to manage onglueops DNS entries
externalDns:
  # -- Part of `externaldns_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `externaldns_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_region: us-west-2

# Used to manage SSL certificates. Leverages DNS verification for onglueops domains.
certManager:
  # -- Get your EAB credentials from: https://zerossl.com/documentation/acme#:~:text=To%20generate%20EAB%20credentials%20click,a%20new%20set%20of%20credentials Note: these appear only once so be sure to save them!
  zerossl_eab_hmac_key: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Get your EAB credentials from: https://zerossl.com/documentation/acme#:~:text=To%20generate%20EAB%20credentials%20click,a%20new%20set%20of%20credentials Note: these appear only once so be sure to save them!
  zerossl_eab_kid: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `certmanager_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `certmanager_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_region: us-west-2

grafana:
  # @ignored
  github_admin_org_name: GlueOps
  # @ignored
  github_admin_team_name: grafana_super_admins
  github_other_org_names: glueops-rocks
  # -- Default admin password. CHANGE THIS!!!!
  admin_password: glueops-is-awesome


loki:
  # -- Format: glueops-tenant-<tenant-name-goes-here>-<cluster_env>-loki-primary
  bucket: glueops-tenant-<tenant-name-goes-here>-<cluster_env>-loki-primary
  # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_region: us-west-2
  # -- Part of `loki_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `loki_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX

dex:
  github:
    # -- To create a clientID please reference: https://github.com/GlueOps/github-oauth-apps
    client_id: XXXXXXXXXXXXXXXXXXXXXXXXXX
    # -- To create a clientSecret please reference: https://github.com/GlueOps/github-oauth-apps
    client_secret: XXXXXXXXXXXXXXXXXXXXXXXXXX
    # -- Specify the github orgs you want to allow access to. This is a list of strings. Note: users still need to be in the proper groups to have access.
    orgs:
      - GlueOps
      - glueops-rocks
  argocd:
    # -- Specify a unique password here. This will be used to connect argocd via OIDC to the Dex IDP. You can create one with in bash `openssl rand -base64 32`
    client_secret: XXXXXXXXXXXXXXXXXXXXXXXXXX
  grafana:
    # -- Specify a unique password here. This will be used to connect grafana via OAuth to the Dex IDP. You can create one with in bash `openssl rand -base64 32`
    client_secret: XXXXXXXXXXXXXXXXXXXXXXXXXX