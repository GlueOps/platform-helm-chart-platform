apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vault
  annotations:
    argocd.argoproj.io/sync-wave: "4"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    name: "in-cluster"
    namespace: glueops-core-vault
  project: glueops-core
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    retry:
      backoff:
        duration: 10s
        factor: 2
        maxDuration: 3m0s
      limit: 5
  ignoreDifferences:
    - group: admissionregistration.k8s.io
      jqPathExpressions:
        - '.webhooks[0].clientConfig.caBundle'
      kind: MutatingWebhookConfiguration
  source:
    repoURL: 'https://helm.releases.hashicorp.com'
    chart: vault
    targetRevision: 0.27.0
    helm:
      values: |-
        # Vault Helm Chart Value Overrides
        global:
          enabled: true
          tlsDisable: false

        ui:
          enabled: true
        injector:
          enabled: false
        server:
          {{- toYaml .Values.glueops_node_and_tolerations | nindent 10 }}
          image:
            repository: {{ .Values.container_images.app_vault.vault.image.repository }}
            tag: {{ .Values.container_images.app_vault.vault.image.tag }}
          updateStrategyType: "RollingUpdate"
          dataStorage:
            size: {{ .Values.vault.data_storage }}Gi
          ingress:
              activeService: false
              ingressClassName: public-authenticated
              annotations: 
                cert-manager.io/cluster-issuer: letsencrypt
                ingress.pomerium.io/allow_any_authenticated_user: 'true'
                ingress.pomerium.io/pass_identity_headers: 'true'
                ingress.pomerium.io/secure_upstream: 'true'
                ingress.pomerium.io/tls_skip_verify: 'true'
                ingress.pomerium.io/idle_timeout: 0s
              enabled: true
              hosts: 
                - host: vault.{{ .Values.captain_domain }}
              
          extraEnvironmentVars:
            VAULT_CACERT: /vault/userconfig/vault-tls/ca.crt
            VAULT_TLSCERT: /vault/userconfig/vault-tls/tls.crt
            VAULT_TLSKEY: /vault/userconfig/vault-tls/tls.key

          # extraVolumes is a list of extra volumes to mount. These will be exposed
          # to Vault in the path `/vault/userconfig/<name>/`.
          extraVolumes:
            - type: secret
              name: vault-tls

          standalone:
            enabled: false

          # Run Vault in "HA" mode.
          ha:
            enabled: true
            replicas: 3
            raft:
                enabled: true
                setNodeId: true
                config: |
                  ui = true
                  listener "tcp" {
                    address = "0.0.0.0:8200"
                    cluster_address = "0.0.0.0:8201"
                    tls_cert_file = "/vault/userconfig/vault-tls/tls.crt"
                    tls_key_file  = "/vault/userconfig/vault-tls/tls.key"
                    tls_client_ca_file = "/vault/userconfig/vault-tls/ca.crt"
                    tls_min_version = "tls12"
                    telemetry {
                      unauthenticated_metrics_access = true
                    }
                  }

                  storage "raft" {
                    path = "/vault/data"
                    retry_join {
                      auto_join = "provider=k8s label_selector=\"component=server,app.kubernetes.io/name=vault\" namespace=\"glueops-core-vault\" "
                      leader_tls_servername = "vault-active.glueops-core-vault.svc.cluster.local"
                      leader_client_cert_file = "/vault/userconfig/vault-tls/tls.crt"
                      leader_client_key_file = "/vault/userconfig/vault-tls/tls.key"
                      leader_ca_cert_file = "/vault/userconfig/vault-tls/ca.crt"
                    }

                    autopilot {
                      cleanup_dead_servers = "true"
                      last_contact_threshold = "200ms"
                      last_contact_failure_threshold = "10m"
                      max_trailing_logs = 250000
                      min_quorum = 5
                      server_stabilization_time = "10s"
                    }

                  }
                  
                  telemetry {
                      disable_hostname = true
                      prometheus_retention_time = "30s"
                      enable_hostname_label = true
                  }

                  service_registration "kubernetes" {}
